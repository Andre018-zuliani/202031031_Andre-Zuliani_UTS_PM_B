{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Andre018-zuliani/202031031_Andre-Zuliani_UTS_PM_B/blob/master/Tugas%20dicoding\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o2C8UBRmwVO2"
      },
      "outputs": [],
      "source": [
        "import zipfile\n",
        "import os\n",
        "import PIL\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import shutil\n",
        "from PIL import Image, ImageOps"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q kaggle.json\n",
        "!mkdir ~/.kaggle\n",
        "!cp kaggle.json ~/.kaggle\n",
        "!chmod 600 ~/.kaggle/kaggle.json\n",
        "!kaggle datasets download -d 'drgfreeman/rockpaperscissors'"
      ],
      "metadata": {
        "id": "2dmh4geRwX-S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9d8c9557-beca-4339-beaa-5db65dee7dd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[31mERROR: Could not find a version that satisfies the requirement kaggle.json (from versions: none)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for kaggle.json\u001b[0m\u001b[31m\n",
            "\u001b[0mcp: cannot stat 'kaggle.json': No such file or directory\n",
            "chmod: cannot access '/root/.kaggle/kaggle.json': No such file or directory\n",
            "Dataset URL: https://www.kaggle.com/datasets/drgfreeman/rockpaperscissors\n",
            "License(s): CC-BY-SA-4.0\n",
            "Downloading rockpaperscissors.zip to /content\n",
            " 97% 297M/306M [00:03<00:00, 78.1MB/s]\n",
            "100% 306M/306M [00:03<00:00, 83.7MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_dir = 'dataset_raw'\n",
        "os.mkdir(dataset_dir)"
      ],
      "metadata": {
        "id": "5SMXZQNAwZSJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "target_file = 'rockpaperscissors.zip'\n",
        "\n",
        "extracting = zipfile.ZipFile(target_file, 'r')\n",
        "\n",
        "extracting.extractall(dataset_dir)\n",
        "\n",
        "extracting.close()"
      ],
      "metadata": {
        "id": "hEPLJi14watv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# paper\n",
        "\n",
        "\n",
        "\n",
        "# 80 % -> training\n",
        "# paper1.png\n",
        "# paper2.png\n",
        "# paper3.png\n",
        "# paper4.png\n",
        "\n",
        "# 20 % -> validation\n",
        "# paper5.png"
      ],
      "metadata": {
        "id": "C2HSBlG-9P5v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_dir = os.path.join(dataset_dir, 'rps-cv-images')\n",
        "# dataset_raw/rps-cv-images"
      ],
      "metadata": {
        "id": "XVqy0aiM9rqv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "classdir_list = ['paper', 'rock', 'scissors']"
      ],
      "metadata": {
        "id": "Pl3pBkFo91WL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_percentage = 0.9"
      ],
      "metadata": {
        "id": "ChKIOICN9-gF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_dataset_dir = 'training'\n",
        "validation_dataset_dir = 'validation'"
      ],
      "metadata": {
        "id": "oQjzZCL6-E8V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "os.mkdir(training_dataset_dir)\n",
        "os.mkdir(validation_dataset_dir)"
      ],
      "metadata": {
        "id": "hufW62CU-PrP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for dirname in classdir_list:\n",
        "  classpath = os.path.join(dataset_dir, dirname)\n",
        "  # dataset_raw/rps-cv-images/scissors\n",
        "\n",
        "  counter = 0\n",
        "  training_length = training_percentage * len(os.listdir(classpath))\n",
        "\n",
        "  training_classpath = os.path.join(training_dataset_dir, dirname)\n",
        "  # training/paper\n",
        "  validation_classpath = os.path.join(validation_dataset_dir, dirname)\n",
        "\n",
        "  os.mkdir(training_classpath)\n",
        "  os.mkdir(validation_classpath)\n",
        "\n",
        "  for filename in os.listdir(classpath):\n",
        "    filepath = os.path.join(classpath, filename)\n",
        "    if counter < training_length:\n",
        "      shutil.move(filepath, training_classpath)\n",
        "    else:\n",
        "      shutil.move(filepath, validation_classpath)\n",
        "\n",
        "    counter += 1"
      ],
      "metadata": {
        "id": "ZvT88wIt-Umt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_datagen = tf.keras.preprocessing.image.ImageDataGenerator (\n",
        "    rescale = 1./255,\n",
        "    zoom_range = 0.25,\n",
        "    horizontal_flip = True,\n",
        "    vertical_flip = True\n",
        ")\n",
        "\n",
        "validation_datagen = tf.keras.preprocessing.image.ImageDataGenerator (\n",
        "    rescale = 1./255\n",
        ")"
      ],
      "metadata": {
        "id": "znKZIjfIwcSO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_generator = training_datagen.flow_from_directory(\n",
        "    training_dataset_dir,\n",
        "    target_size = (150, 150),\n",
        "    class_mode = 'categorical'\n",
        ")\n",
        "\n",
        "validation_generator = validation_datagen.flow_from_directory(\n",
        "    validation_dataset_dir,\n",
        "    target_size = (150, 150),\n",
        "    class_mode = 'categorical'\n",
        ")"
      ],
      "metadata": {
        "id": "y0cjFR7Twdum",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26db0bf7-2091-4ccb-db22-4057900cf2cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1970 images belonging to 3 classes.\n",
            "Found 218 images belonging to 3 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Conv2D(8, (3, 3), input_shape = (150, 150, 3), activation ='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Conv2D(16, (3, 3), activation ='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Conv2D(32, (3, 3), activation ='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dense(512, activation = 'relu'),\n",
        "    tf.keras.layers.Dense(3, activation = 'softmax')\n",
        "])\n",
        "\n",
        "model.compile(\n",
        "    metrics = ['acc'],\n",
        "    loss = 'categorical_crossentropy',\n",
        "    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n",
        ")\n",
        "\n",
        "model.fit(\n",
        "    training_generator,\n",
        "    validation_data = validation_generator,\n",
        "    epochs = 3\n",
        ")"
      ],
      "metadata": {
        "id": "GbOHZGcTwgx6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94ca3fa5-34e0-4f5f-eb3b-0c1b6c281dda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "62/62 [==============================] - 55s 828ms/step - loss: 1.0004 - acc: 0.5396 - val_loss: 0.6788 - val_acc: 0.7202\n",
            "Epoch 2/3\n",
            "62/62 [==============================] - 38s 613ms/step - loss: 0.4457 - acc: 0.8406 - val_loss: 0.3371 - val_acc: 0.8991\n",
            "Epoch 3/3\n",
            "62/62 [==============================] - 36s 583ms/step - loss: 0.2895 - acc: 0.8898 - val_loss: 0.2384 - val_acc: 0.9083\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7a25637b0910>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mjPbfP8QBZqs"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}